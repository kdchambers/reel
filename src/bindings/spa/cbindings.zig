// SPDX-License-Identifier: MIT
// Copyright (c) 2023 Keith Chambers

pub const spa_audio_max_channels = 64;

extern fn _spa_format_parse(format: *const spa_pod, media_type: *u32, media_subtype: *u32) callconv(.C) i32;
extern fn _spa_format_audio_raw_parse(format: *const spa_pod, info: *spa_audio_info_raw) callconv(.C) i32;

pub const spa_format_parse = _spa_format_parse;
pub const spa_format_audio_raw_parse = _spa_format_audio_raw_parse;

pub const spa_pod = extern struct {
    size: u32,
    type: u32,
};

pub const spa_audio_info_raw = extern struct {
    format: spa_audio_format,
    flags: u32,
    rate: u32,
    channels: u32,
    position: [spa_audio_max_channels]u32,
};

pub const spa_audio_format = enum(u32) {
    unknown,
    encodeded,
    start_interleaved = 0x100,
    s8,
    u8,
    s16_le,
    s16_be,
    u16_le,
    u16_be,
    s24_32_le,
    s24_32_be,
    u24_32_le,
    u24_32_be,
    s32_le,
    s32_be,
    u32_le,
    u32_be,
    s24_le,
    s24_be,
    u24_le,
    u24_be,
    s20_le,
    s20_be,
    u20_le,
    u20_be,
    s18_le,
    s18_be,
    u18_le,
    u18_be,
    f32_le,
    f32_be,
    f64_le,
    f64_be,
    ulaw,
    alaw,
    //
    // Planar
    //
    start_planar = 0x200,
    u8p,
    s16p,
    s24_32p,
    s32p,
    s24p,
    f32p,
    f64p,
    s8p,
};

pub const spa_audio_channel = enum(u32) {
    unknown,
    na,
    mono,
    fl,
    fr,
    fc,
    lfe,
    sl,
    sr,
    flc,
    frc,
    rc,
    rl,
    rr,
    tc,
    tfl,
    tfc,
    tfr,
    trl,
    trc,
    trr,
    rlc,
    rrc,
    flw,
    frw,
    lfe2,
    flh,
    fch,
    frh,
    tflc,
    tfrc,
    tsl,
    tsr,
    llfe,
    rlfe,
    bc,
    blc,
    brc,

    aux0 = 0x1000,
    aux1,
    aux2,
    aux3,
    aux4,
    aux5,
    aux6,
    aux7,
    aux8,
    aux9,
    aux10,
    aux11,
    aux12,
    aux13,
    aux14,
    aux15,
    aux16,
    aux17,
    aux18,
    aux19,
    aux20,
    aux21,
    aux22,
    aux23,
    aux24,
    aux25,
    aux26,
    aux27,
    aux28,
    aux29,
    aux30,
    aux31,
    aux32,
    aux33,
    aux34,
    aux35,
    aux36,
    aux37,
    aux38,
    aux39,
    aux40,
    aux41,
    aux42,
    aux43,
    aux44,
    aux45,
    aux46,
    aux47,
    aux48,
    aux49,
    aux50,
    aux51,
    aux52,
    aux53,
    aux54,
    aux55,
    aux56,
    aux57,
    aux58,
    aux59,
    aux60,
    aux61,
    aux62,
    aux63,

    last_aux = 0x1fff,
    start_custom = 0x10000,
};
